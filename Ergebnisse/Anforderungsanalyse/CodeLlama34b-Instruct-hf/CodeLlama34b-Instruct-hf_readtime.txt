
The goal of this project is to create a software which estimates the reading time of different types of content. The estimated readtime should be based on the words-per-minute rate. This program has to be able to process plain text, HTML and markdown formats. In order to give realistic estimates this program should take both complexity and length of the input texts into account. If the user tries to use an unsupported input such as TeX-Code or AsciiDoc there has to be a proper exception handling with error-messages for the user.
The following features are required:
The program should be able to process plain text, HTML and markdown formats.
The estimated readtime should be based on the words-per-minute rate.
The program should take both complexity and length of the input texts into account.
If the user tries to use an unsupported input such as TeX-Code or AsciiDoc there has to be a proper exception handling with error-messages for the user.
The following data description is required:
The program should be able to process plain text, HTML and markdown formats. This means that the program should be able to read in different types of files. The program should also be able to handle different encodings.
The estimated readtime should be based on the words-per-minute rate. This means that the program should have a default value for the words-per-minute rate and should be able to change this value if needed.
The program should take both complexity and length of the input texts into account. This means that the program should be able to calculate the readtime based on the number of words in the text, but also based on the complexity of the text. The program should also be able to handle different types of content such as articles, blog posts or books.
If the user tries to use an unsupported input such as TeX-Code or AsciiDoc there has to be a proper exception handling with error-messages for the user. This means that the program should be able to handle different types of inputs and should be able to give feedback if the input is not supported.
The following technical constraints are required:
The program should be implemented with Python 3.x.
The program should use libraries like beautifulsoup4, lxml, markdown2, pyquery and pytest.
The program should be able to handle different types of inputs such as plain text, HTML and markdown formats.
The program should be able to calculate the readtime based on the number of words in the text, but also based on the complexity of the text.
The program should be able to handle different encodings.
The program should be able to give feedback if the input is not supported.
The following requirements are required:
The program should be able to process plain text, HTML and markdown formats. This means that the program should be able to read in different types of files. The program should also be able to handle different encodings.
The estimated readtime should be based on the words-per-minute rate. This means that the program should have a default value for the words-per-minute rate and should be able to change this value if needed. The program should also be able to calculate the readtime based on the number of words in the text, but also based on the complexity of the text.
If the user tries to use an unsupported input such as TeX-Code or AsciiDoc there has to be a proper exception handling with error-messages for the user. This means that the program should be able to handle different types of inputs and should be able to give feedback if the input is not supported.
The following usage is required:
The program should be able to process plain text, HTML and markdown formats. This means that the program should be able to read in different types of files. The program should also be able to handle different encodings. The program should be able to calculate the readtime based on the number of words in the text, but also based on the complexity of the text.
The program should be able to give feedback if the input is not supported. This means that the program should be able to handle different types of inputs and should be able to give feedback if the input is not supported.
The following acceptance criteria are required:
The program should be able to process plain text, HTML and markdown formats. This means that the program should be able to read in different types of files. The program should also be able to handle different encodings.
The estimated readtime should be based on the words-per-minute rate. This means that the program should have a default value for the words-per-minute rate and should be able to change this value if needed. The program should also be able to calculate the readtime based on the number of words in the text, but also based on the complexity of the text.
If the user tries to use an unsupported input such as TeX-Code or AsciiDoc there has to be a proper exception handling with error-messages for the user. This means that the program should be able to handle different types of inputs and should be able to give feedback if the input is not supported. The program should also be able to handle different encodings.
The program should be implemented with Python 3.x.
The program should use libraries like beautifulsoup4, lxml, markdown2, pyquery and pytest. This means that the program should be able to read in different types of files. The program should also be able to handle different encodings.
The program should be able to calculate the readtime based on the number of words in the text, but also based on the complexity of the text.
The program should be able to give feedback if the input is not supported. This means that the program should be able to handle different types of inputs and should be able to give feedback if the input is not supported. The program should also be able to handle different encodings.