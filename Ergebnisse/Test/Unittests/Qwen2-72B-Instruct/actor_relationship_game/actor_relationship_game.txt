Also include a file tree structure of where you put these testfiles.

To create comprehensive unit tests based on your provided information, we'll follow this directory structure:

├── src
│   ├── main
│   │   └── java
│   │       └── Actor_relationship_game
│   │           ├── Actor.java
│   │           ├── Movie.java
│   │           ├── ActorGraph.java
│   │           ├── TMDBApi.java
│   │           ├── GraphCreation.java
│   │           ├── ActorGraphUtil.java
│   │           └── GameplayInterface.java
└── test
    └── java
        └── Actor_relationship_game
            ├── ActorTest.java
            ├── MovieTest.java
            ├── TMDBApiTest.java
            ├── GraphCreationTest.java
            ├── ActorGraphUtilTest.java
            └── GameplayInterfaceTest.java


Here are the unit tests for each class:

ActorTest.java

package Actor_relationship_game;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class ActorTest {
    @Test
    public void testConstructor() {
        int id = 1234567890;
        String name = "Tom Hanks";
        Actor actor = new Actor(id, name);
        assertEquals(id, actor.getId());
        assertEquals(name, actor.getName());
    }
}


MovieTest.java

package Actor_relationship_game;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class MovieTest {
    @Test
    public void testConstructor() {
        int id = 1234567890;
        String title = "Forrest Gump";
        Movie movie = new Movie(id, title);
        assertEquals(id, movie.getId());
        assertEquals(title, movie.getTitle());
    }
}


TMDBApiTest.java

package Actor_relationship_game;

import org.junit.jupiter.api.Test;
import static org.mockito.Mockito.*;

public class TMDBApiTest {
    @Test
    public void testGetMoviesByActorId() throws IOException {
        String actorId = "1234567890";
        String expectedResponse = "{\"id\": 123, \"name\": \"Tom Hanks\", \"movie_ids\": [123]}";

        OkHttpClient mockClient = mock(OkHttpClient.class);
        Response mockResponse = new Response.Builder().code(200).message("OK").body(okhttp3.ResponseBody.create(expectedResponse)).build();
        when(mockClient.newCall(any()).execute()).thenReturn(mockResponse);

        TMDBApi tmdbApi = spy(new TMDBApi());
        doReturn(mockClient).when(tmdbApi).client;

        String response = tmdbApi.getMoviesByActorId(actorId);
        assertEquals(expectedResponse, response);
    }

    @Test
    public void testSearchPopularActors() throws IOException {
        String expectedResponse = "{\"results\": [{\"id\": 1234567890, \"name\": \"Tom Hanks\", \"movie_ids\": [123]}]}";

        OkHttpClient mockClient = mock(OkHttpClient.class);
        Response mockResponse = new Response.Builder().code(200).message("OK").body(okhttp3.ResponseBody.create(expectedResponse)).build();
        when(mockClient.newCall(any()).execute()).thenReturn(mockResponse);

        TMDBApi tmdbApi = spy(new TMDBApi());
        doReturn(mockClient).when(tmdbApi).client;

        String response = tmdbApi.searchPopularActors();
        assertEquals(expectedResponse, response);
    }
}


GraphCreationTest.java

package Actor_relationship_game;

import org.junit.jupiter.api.Test;
import static org.mockito.Mockito.*;
import java.io.File;
import java.util.HashMap;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonObject;

public class GraphCreationTest {
    @Test
    public void testCreateGraph() throws IOException, ClassNotFoundException {
        String actorId = "1234567890";
