== Running in interactive mode. ==
 - Press Ctrl+C to interject at any time.
 - Press Return to return control to the AI.
 - To return control without starting a new line, end your input with '/'.
 - If you want to submit another line, end your input with '\'.

You are a helpful Python programer.


> The Hone project is designed to facilitate the conversion of CSV files into nested JSON formats. It aims to provide a robust and flexible solution for transforming flat CSV data structures into hierarchical JSON objects that are more suitable for various applications and data needs.
I would now like to add a new functionality. I need to have a function which writes a given JSON to a given file, or standard output if filepath is "-".
To do so, I need to know which file needs to be changed to implement this new functionality. Here is the filetree:
```bash
├── examples
│   ├── demo.py
│   ├── demo.sh
│   ├── example_a.csv
│   ├── example_a.json
│   ├── example_b.csv
│   ├── example_b.json
│   ├── example_c.csv
│   └── example_c.json
├── hone
│   ├── __init__.py
│   ├── hone.py
│   ├── __main__.py
│   ├── utils
│   │   ├── __init__.py
│   │   ├── csv_utils.py
│   │   ├── json_utils.py
│   │   └── test_utils.py
├── LICENSE
└── README.md
``` To implement the new functionality of writing JSON to a given file or standard output, you need to modify the `json_utils.py` file in the `utils` directory of the `hone` project. Here is the file path where you should add the new functionality:

```bash
hone/utils/json_utils.py
```

You will need to add a function that takes a JSON object and a file path as arguments. If the file path is `"-"` (dash), it should write to standard output. Otherwise, it should write to the specified file. Here's how you can do it:

1. Open the `json_utils.py` file.
2. Add the new function `write_json_to_file`.

Here's an example implementation:

```python
import json
import sys

def write_json_to_file(json_data, filepath):
    """
    Writes the given JSON data to a file or standard output if the filepath is "-".

    Args:
        json_data (dict or list): The JSON
>
 data to write.
        filepath (str): The path to the file where the JSON data will be written.
                       If "-", writes to standard output.
    """
    if filepath == "-":
        json_output = json.dumps(json_data, indent=4)
        sys.stdout.write(json_output + "\n")
    else:
        with open(filepath, 'w') as file:
            json.dump(json_data, file, indent=4)
```

This function uses Python's `json` module to serialize the JSON data and `sys.stdout` to write to standard output if the `filepath` is `"-"`. Otherwise, it opens the specified file in write mode and writes the JSON data to it.

Make sure to import the necessary modules at the beginning of the `json_utils.py` file if they are not already imported:

```python
import json
import sys
```

With this implementation, you can now use the `write_json_to_file` function to write JSON data to either a specified file or standard output.

> Thank you