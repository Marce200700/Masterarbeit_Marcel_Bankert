== Running in interactive mode. ==
 - Press Ctrl+C to interject at any time.
 - Press Return to return control to the AI.
 - To return control without starting a new line, end your input with '/'.
 - If you want to submit another line, end your input with '\'.

 <|im_start|>system
You are a helpful Java programer.<|im_end|>

> The Actor Relationship Game is a Java-based application that allows users to explore connections between popular actors through their movie collaborations, using data from The Movie Database (TMDB) API. It constructs an actor graph and identifies the shortest path of relationships between any two actors.
I would like to change the code. I want you to add proper exception handling inside the 'findConnections' function for the case that an IOException occurs.
Here is the current implementation of this function:
\
public void findConnections(List<String[]> actorPairs, String outputFilePath) {
        PrintWriter writer = new PrintWriter(new FileWriter(outputFilePath))
            for (String[] pair : actorPairs) {
                if (pair.length != 2) {
                    System.out.println("Invalid actor pair. Skipping.");
                    continue;
                }

                String actor1Name = pair[0];
                String actor2Name = pair[1];

                // Assuming getActorIdByName is a method in ActorGraph that returns the actor's ID given a name
                String actor1Id = actorGraph.getActorIdByName(actor1Name);
                String actor2Id = actorGraph.getActorIdByName(actor2Name);

                if (actor1Id == null || actor2Id == null) {
                    writer.println("One or both actors not found in the graph.");
                    continue;
                }

                List<Map.Entry<String, String>> connectionPath = actorGraph.findConnectionWithPath(actor1Id, actor2Id);

                if (connectionPath.isEmpty()) {
                    writer.println("===================================================");
                    writer.println("No connection found between " + actor1Name + " and " + actor2Name + ".");
                    writer.println("===================================================");
                    writer.println();
                } else {
                    writer.println("===================================================");
                    writer.println("Connection Number between " + actor1Name + " and " + actor2Name + ":" + (connectionPath.size() - 1));
                    writer.println("Connection path between " + actor1Name + " and " + actor2Name + ":");
                    for (int i = 0; i < connectionPath.size(); i++) {
                        Map.Entry<String, String> step = connectionPath.get(i);
                        writer.println((i + 1) + ". " + step.getKey() + ": " + step.getValue());
                    }
                    writer.println("===================================================");
                    writer.println();
                }
            }
    }
>
You can add a try-catch block to handle any IOException that may occur when creating the PrintWriter object. Here's how you can modify the function:

```java
public void findConnections(List<String[]> actorPairs, String outputFilePath) {
    try (PrintWriter writer = new PrintWriter(new FileWriter(outputFilePath))) {
        for (String[] pair : actorPairs) {
            if (pair.length != 2) {
                System.out.println("Invalid actor pair. Skipping.");
                continue;
            }

            String actor1Name = pair[0];
            String actor2Name = pair[1];

            String actor1Id = actorGraph.getActorIdByName(actor1Name);
            String actor2Id = actorGraph.getActorIdByName(actor2Name);

            if (actor1Id == null || actor2Id == null) {
                writer.println("One or both actors not found in the graph.");
                continue;
            }

            List<Map.Entry<String, String>> connectionPath = actorGraph.findConnectionWithPath(actor1Id, actor2Id);

            if (connectionPath.isEmpty()) {
                writer.println("===================================================");
                writer.println("No connection found between " + actor1Name + " and " + actor2Name + ".");
                writer.println("===================================================");
                writer.println();
            } else {
                writer.println("===================================================");
                writer.println("Connection Number between " + actor1Name + " and " + actor2Name + ":" + (connectionPath.size() - 1));
                writer.println("Connection path between " + actor1Name + " and " + actor2Name + ":");
                for (int i = 0; i < connectionPath.size(); i++) {
                    Map.Entry<String, String> step = connectionPath.get(i);
                    writer.println((i + 1) + ". " + step.getKey() + ": " + step.getValue());
                }
                writer.println("===================================================");
                writer.println();
            }
> Thank you