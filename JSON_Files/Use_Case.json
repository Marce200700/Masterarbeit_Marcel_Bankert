{
    "Use_Cases": [
        {
            "name": "Anforderungsanalyse",
            "task_text_actor_relationship_game": "Please use the information to generate a software requirement specification. While doing so please use the following structure as a template. 'Introduction', 'Goals', 'Features and Functionalities', 'Technical Constraints' , 'Requirements', 'Acceptance Criteria', 'Dependencies' and 'Terms/Concepts Explanation'.",
            "task_text_hone": "Please use the following information to generate a software requirement specification. While doing so please use the following structure as a template. 'Introduction', 'Goals', 'Features and Functionalities', 'Supporting Data Description', 'Technical Constraints' , 'Requirements', 'Dependencies', 'Usage' 'Acceptance Criteria', and 'Terms/Concepts Explanation'.",
            "task_text_hybrid_images": "Please use the following information to generate a software requirement specification. While doing so please use the following structure as a template. 'Introduction', 'Goals', 'Features and Functionalities', 'Technical Requirements', 'Requirements', 'Usage', 'Acceptance Criteria'.",
            "task_text_login_registration": "Please use the following information to generate a software requirement specification. While doing so please use the following structure as a template. 'Introduction', 'Goals', 'Features and Functionalities', 'Technical Constraints' , 'Use Cases', 'Requirements', 'Data Requirements', 'Design and User Interface', 'Acceptance Criteria', 'Dependencies' and 'Terms/Concepts Explanation'.",
            "task_text_readtime": "Please use the following information to generate a software requirement specification. While doing so please use the following structure as a template. 'Introduction', 'Goals', 'Features and Functionalities', 'Supporting Data Description', 'Technical Constraints' , 'Requirements', 'Usage' and 'Acceptance Criteria'.",
            "input_actor_relationship_game": "The Actor Relationship Game should be a program which allows users to explore relationships between actors. These relationships are established by the films in which actors took part in. The data for the informations about actors and the respective films they took part in comes from the The Movie Database (TMDB) API. Interactions with TMDB API must adhere to its terms and usage limits. With the given data the Actor Relationship Game has to be able to identify the shortest path between actors. Thus this Java-based programm has to be able to represent the shortest path visually. To realise the aforementioned functionalities, the Actor Relationship Game has to handle API calls to fetch actor and movie data. The api-key, which has to be used to retrieve curcial movie and actor data, has to be stored in a an environment variable called „TMDB_API_KEY“. With the api key and the TMDB data, this program should be able to search for specific actors and films by their respective IDs. Aside from the programming language Java, the programm has to use Gradle, a TMDB API key, java.util, java.io, java.nio, com.google.gson, org.junit.jupiter.api and since this is a Java-based programm the Java Runtime Environment has to be utilized as well. The objects this program has to work with are actors and movies. Additionally there may be utility classes for a gameplay interface or the creation of the shortest path between two actors. An actor has to have an unique ID, a name and a set of movie IDs they participated in. A movie has to have an unique ID, a name, and a set of unique actor IDs involved in the movie. To save the shortest graphs that could be found, the results should be saved inside a .txt file called „actor_connection_results.txt“. ",
            "input_hone": "The Hone programs main purpose is to convert CSV files into nested JSON files. In order to do so, this program has to be written in Python and utilize built-in libraries to parse CSV files and generate respective nested JSON files like csv, json, argparse or contextlib. Therefore Hone has to be able to parse CSV files and generate nested JSON files. This program should also be able to deal with different delimiters which might be used for CSV files. The generated nested JSON files need to have proper indentations and sorted keys for better readability. For the implementation different utility classes may be used. The program should also be usable via CLI. Furthermore one should be able to set variables like custom delimiters for the delimiters of the CSV file which the user refers to or a schema variable which allows the user to set a template for the output of the nested JSON file. The aforementioned variables have to be optional. In addition to that there have to be two required variables with the CSV- and the JSON filepath. Apart from the mentioned libraries no external dependencies are required for the core functionality.",
            "input_hybrid_images": "The Hybrid-Images program has the objective to generate hybrid images with the usage of different image processing and filtering techniques. These techniques and filters include cross-correlation, convolution, Gaussian blur, high-pass- and low-pass-filters. With these techniques the program should be able to generate a hybrid image using two different images as an input. The merged image has to be visuallsy coherent to the two input-images. This program needs to be implemented with Python. Concerning external libraries NumPy and OpenCV can be used for the image processing tasks.",
            "input_login_registration": "The Login-Registration program serves as an user management interface which features three pages. The first one is for an user authentication which has two input fields for the username and password. The latter input should have the input type password. Additionally this program should provide two buttons for the user authentication page. One should be for the login and the other should allow users to register. If the user klicks on the register button there should be a page which offers four input fields asking the user to type in his first name, last name, username and password. Moreover the password should be constrained to be at least six characters long. Of course the user has to fill all the inputs in order to register. A cancel button should allow the user to return to the previosly described login page. The third and last page this program has to have appears after the user has logged in successfully. On this page the user should be greated with his first name that was set during the registration process. Under the greating message there should be a list with all the users who registrated for the page. The list features both the first- and last -name of the respective users and a delete button which allows the user to delete user-accounts. The user interface has to be intuitive, user-friendly and flexible. In addition to that the user interface has to be both compatible with all common browsers like Chrome, Firefox, Safari and Edge as well as mobile devices such as smartphones or tablets. For the implementation process this program should be implemented with JavaScript and use Vue2.x as the frontend framework, Babel6.x for the compilation process, NPM for third-party libraries and CSS for styling if necessary.",
            "input_readtime": "Readtime is a program which estimates the reading time of different types of content. The estimated readtime should be based on the words-per-minute rate. This program has to be able to process plain text, HTML and markdown formats. In order to give realistic estimates this program should take both complexity and length of the input texts into account. If the user tries to use an unsupported input such as TeX-Code or AsciiDoc there has to be a proper exception handling with error-messages for the user. As for the technologies to use, this program has to be implemented with Python 3.x and should use libraries like beautifulsoup4, lxml, markdown2, pyquery and pytest."
        },
        {
            "name": "Entwurf",
            "task_text_actor_relationship_game": "Please generate a software design. To do so you have to create an UML-class diagram, an UML-sequence diagram and directories and a build.gradle file where all needed depencencies are defined. Furthermore generate a file tree with a textual description of the files and directories where you explain the task they will fullfill. Please use the plantUML syntax for the aforementioned UML-diagrams. Please use the following Information.",
            "task_text_hone": "Please generate a software design. To do so you have to create an UML-class diagram and an UML-sequence diagram. Furthermore generate a file tree with a textual description of the files and directories where you explain the task they will fullfill. Please use the plantUML syntax for the aforementioned UML-diagrams. Please use the following Information.",
            "task_text_hybrid_images": "Please generate a software design. To do so you have to create an UML-class diagram, an UML-sequence diagram and a requirements.txt file where all needed depencencies are defined. Furthermore generate a file tree with a textual description of the files and directories where you explain the task they will fullfill. Please use the plantUML syntax for the aforementioned UML-diagrams. Please use the following Information.",
            "task_text_login_registration": "Please generate a software design. To do so you have to create an UML-class diagram and an UML-sequence diagram. Furthermore generate a file tree with a textual description of the files and directories where you explain the task they will fullfill. Please use the plantUML syntax for the aforementioned UML-diagrams. Please use the following Information.",
            "task_text_readtime": "Please generate a software design. To do so you have to create an UML-class diagram, an UML-sequence diagram and a requirements.txt file where all needed depencencies are defined. Furthermore generate a file tree with a textual description of the files and directories where you explain the task they will fullfill. Please use the plantUML syntax for the aforementioned UML-diagrams. Please use the following Information.",
            "input_actor_relationship_game_PRD": "../Additional_Data/PRD_actor_relationship_game.txt",
            "input_hone_PRD": "../Additional_Data/PRD_hone.txt",
            "input_hybrid_images_PRD": "../Additional_Data/PRD_hybrid_images.txt",
            "input_login_registration_PRD": "../Additional_Data/PRD_login_registration.txt",
            "input_readtime_PRD": "../Additional_Data/PRD_readtime.txt"
        },
        {
            "name": "Umsetzung",
            "task_text": "Implement the code for the ",
            "input_actor_relationship_game_PRD": "../Additional_Data/PRD_actor_relationship_game.txt",
            "language_actor_relationship_game": "Java ",
            "files_actor_relationship_game":["Actor.java", "Movie.java", "ActorGraph.java", "ActorGraphUtil.java", "GameplayInterface.java", "GraphCreation.java", "TMDBApi.java"],
            "input_hone_PRD": "../Additional_Data/PRD_hone.txt",
            "files_hone":["demo.py", "example_a.csv", "example_a.json", "example_b.csv", "example_b.json", "example_c.csv", "example_c.json", "hone.py", "csv_utils.py", "json_utils.py", "test_utils.py" ],
            "language_hone": "Python ",
            "input_hybrid_images_PRD": "../Additional_Data/PRD_hybrid_images.txt",
            "files_hybrid_images":["demo.py", "hybrid.py"],
            "language_hybrid_images": "Python ",
            "input_login_registration_PRD": "../Additional_Data/PRD_login_registration.txt",
            "files_login_registration":["jest.config.js", "package.json", "auth-headers.js", "fake-backend.js", "_helpers -- index.js", "router.js", "_services -- index.js", "user.service.js", "account.module.js", "alert.module.js", "_store -- index.js", "users.module.js", "App.vue", "HomePage.vue", "index.html", "index.js", "LoginPage.vue", "RegisterPage.vue", "webpack.config.js"],
            "language_login_registration": "JavaScript and Vue ",
            "input_readtime_PRD": "../Additional_Data/PRD_readtime.txt",
            "files_readtime":["demo.py", "__about__.py", "api.py", "result.py", "utils.py"],
            "language_readtime": "Python ",
            "input_actor_relationship_game_Design": "../Additional_Data/Design_actor_relationship_game.txt",
            "input_hone_Design": "../Additional_Data/Design_hone.txt",
            "input_hybrid_images_Design": "../Additional_Data/Design_hybrid_images.txt",
            "input_login_registration_Design": "../Additional_Data/Design_login_registration.txt",
            "input_readtime_Design": "../Additional_Data/Design_readtime.txt"
        },
        {
            "name": "Test",
            "task_text_unit_tests": "Generate unit-tests for the project with the given software requirements specification, software design and sourcecode. Please generate seperate sourcecode files devided by the unit that will be tested.",
            "task_generate_test_cases": "Please generate ten more test cases based on the .",
            
            "input_actor_relationship_game_Sourcecode": "../DevBench_Project/DevBench/benchmark_data/java/Actor_relationship_game/src/main/java/Actor_relationship_game/",
            "input_hone_Sourcecode": "../DevBench_Project/DevBench/benchmark_data/python/hone/hone/",
            "input_hybrid_images_Sourcecode": "../DevBench_Project/DevBench/benchmark_data/python/Hybrid_Images/src/",
            "input_login_registration_Sourcecode": "../DevBench_Project/DevBench/benchmark_data/javascript/login-registration/src/",
            "input_readtime_Sourcecode": "../DevBench_Project/DevBench/benchmark_data/python/readtime/readtime/",
            "input_actor_relationship_game_Sourcecode_test_implementation": "../DevBench_Project/DevBench/benchmark_data/java/Actor_relationship_game/src/test/java/Actor_relationship_game/ActorGraphTest.java",
            "input_hone_Sourcecode_test_implementation": "../DevBench_Project/DevBench/benchmark_data/python/hone/unit_tests/test_hone.py",
            "input_hybrid_images_Sourcecode_test_implementation": "../DevBench_Project/DevBench/benchmark_data/python/Hybrid_Images/unit_tests/unit_test.py",
            "input_login_registration_Sourcecode_test_implementation": "../DevBench_Project/DevBench/benchmark_data/javascript/login-registration/test/RegisterPage.spec.js",
            "input_readtime_Sourcecode_test_implementation": "../DevBench_Project/DevBench/benchmark_data/python/readtime/unit_tests/test_check_data.py",
            "input_actor_relationship_game_Sourcecode_test_case_examples": "assertNotNull(graph.getActors().get('101'));assertEquals('John Doe', graph.getActors().get('101').getName());",
            "input_hone_Sourcecode_test_case_examples": "You should generate more equal equivalent CSV and JSON files like in '../DevBench_Project/DevBench/benchmark_data/python/hone/data_file/small_cats_dataset/dataset.csv' and '../DevBench_Project/DevBench/benchmark_data/python/hone/data_file/small_cats_dataset/nested_dataset.json'.",
            "input_hybrid_images_Sourcecode_test_case_examples": "self.small_height = 10; self.small_width = 8; self.big_height = 50; self.big_width = 40; self.big_img_grey = np.random.rand(self.big_height,self.big_width); self.small_img_grey = np.random.rand(self.small_height,self.small_width); self.img_rgb = np.random.rand(self.big_height,self.big_width,3);",
            "input_login_registration_Sourcecode_test_case_examples": "Generate further Test cases for invalid registration parameters like the following example: wrapper.setData({user: {firstName: '',lastName: '',username: '',password: ''}});",
            "input_readtime_Sourcecode_test_case_examples": "with self.assertRaises(Exception) as e: readtime.utils.read_time('Some simple text', format=123); self.assertEqual(str(e.exception), 'Unsupported format: 123')",

            "task_text": "Implement the code for the ",
            "input_actor_relationship_game_PRD": "../Additional_Data/PRD_actor_relationship_game.txt",
            "language_actor_relationship_game": "Java ",
            "files_actor_relationship_game":["Actor.java", "Movie.java", "ActorGraph.java", "ActorGraphUtil.java", "GameplayInterface.java", "GraphCreation.java", "TMDBApi.java"],
            "input_hone_PRD": "../Additional_Data/PRD_hone.txt",
            "files_hone":["hone.py", "utils/csv_utils.py", "utils/json_utils.py"],
            "language_hone": "Python ",
            "input_hybrid_images_PRD": "../Additional_Data/PRD_hybrid_images.txt",
            "files_hybrid_images":["hybrid.py"],
            "language_hybrid_images": "Python ",
            "input_login_registration_PRD": "../Additional_Data/PRD_login_registration.txt",
            "files_login_registration":["_helpers/auth-headers.js", "_helpers/fake-backend.js", "_helpers/index.js", "_helpers/router.js", "_services/index.js", "_services/user.service.js", "_store/account.module.js", "_store/alert.module.js", "_store/index.js", "_store/users.module.js", "app/App.vue", "home/HomePage.vue", "index.html", "index.js", "login/LoginPage.vue", "register/RegisterPage.vue"],
            "language_login_registration": "JavaScript and Vue ",
            "input_readtime_PRD": "../Additional_Data/PRD_readtime.txt",
            "files_readtime":["api.py", "result.py", "utils.py"],
            "language_readtime": "Python ",
            "input_actor_relationship_game_Design": "../Additional_Data/Design_actor_relationship_game.txt",
            "input_hone_Design": "../Additional_Data/Design_hone.txt",
            "input_hybrid_images_Design": "../Additional_Data/Design_hybrid_images.txt",
            "input_login_registration_Design": "../Additional_Data/Design_login_registration.txt",
            "input_readtime_Design": "../Additional_Data/Design_readtime.txt"
        },
        {
            "name":"Inbetriebnahme",
            "task_text":"You are a classifier. You have two classes. Logs should be classified in 'Ok' if they do not contain any errors. Logs which contain errors should be classified in the class 'Defective'. Classify the previous log and explain the reason for the chosen class.",
            "path_to_logs": "../Logs"
        },
        {
            "name": "Instandhaltung",
            "text_bug_fix": "Please fix the bug based on the given sourcecode and error message.",
            "text_perfective_maintenance_Actor_Relationship_Game_1": "Change the 'findConnections' function to add prints for the case that no connections between an actor pair could be found. Please use both actor names for the print.",
            "text_perfective_maintenance_Actor_Relationship_Game_2": "Change the 'findConnections' function to add prints for the amount of connections between an actor pair. Please use both actor names for the print.",
            "text_perfective_maintenance_Actor_Relationship_Game_3": "Change the 'findConnections' function to add proper error handling for an IOException.",
            "text_perfective_maintenance_Hone_1": "Add a function which should be called 'get_column_names', uses the 'open_csv' function to open a csv file and returns the columns of a csv file.",
            "text_perfective_maintenance_Hone_2": "Add a function which should be called 'get_data_rows', uses the 'open_csv' function to open a csv file and returns the data of a csv file excluding the column row.",
            "text_perfective_maintenance_Hone_3": "Add a function which should be called 'parse_json_file', takes a filepath for a JSON file and returns the parsed JSON file.",
            "text_perfective_maintenance_Hybrid_Images_1": "Add a function which should be called 'low_pass', takes an image, sigma and size as input parameters. The 'low_pass' function then uses the already implemented 'console_2d' and 'gaussian_blur_kernel_2d' functions to return the same image with an applied low pass filter.",
            "text_perfective_maintenance_Hybrid_Images_2": "Add a function which should be called 'high_pass', takes an image, sigma and size as input parameters. The 'high_pass' function then uses the already implemented 'low_pass' function to return the same image with an applied high pass filter.",
            "text_perfective_maintenance_Hybrid_Images_3": "Add a function which should be called 'consolve_2d', takes an image, and kernel. The kernel is a numpy array of the dimension (m x n), where both m and n are odd but do not have to be equal. The 'consolve_2d' function then uses the already implemented 'cross_correlation_2d' function to return an image with the same dimensions as the input image. This means the returned image has the same width, height and number of colour channels as the input image.",
            "text_perfective_maintenance_Login_Registration_1": "Add a login button and all necessary functions to make it possible for a user to login via the login page.",
            "text_perfective_maintenance_Login_Registration_2": "Add a registration button in the login page and all necessary functions to make it possible for a user to register.",
            "text_perfective_maintenance_Login_Registration_3": "Add a greetings Message at the top of the homepage after the user is logged in. Please use the first name of the logged in user.",
            "text_perfective_maintenance_Readtime_1": "Apart from markdown and html normal texts should be a supported input format as well. Therefore add a function which is called 'of_text'. This function takes a text as an input parameter and calculates the readtime and reading speed for the normal text format. This function makes use of the already implemented 'read_time'.",
            "text_perfective_maintenance_Readtime_2": "Apart from normal text and markdown html should be a supported input format as well. Therefore add a function which is called 'of_html'. This function takes a html text as an input parameter and calculates the readtime and reading speed for the html formatted input. This function makes use of the already implemented 'read_time'.",
            "text_perfective_maintenance_Readtime_3": "Apart from normal text and html markdown should be a supported input format as well. Therefore add a function which is called 'of_markdown'. This function takes a markdown text as an input parameter and calculates the readtime and reading speed for the markdown formatted input. This function makes use of the already implemented 'read_time'.",

            "bug_error_message_Actor_Relationship_Game_1":"../Additional_Data/Bugs/ActorRelationshipGame/Bug1_ActorRelationshipGame.txt",
            "bug_error_message_Actor_Relationship_Game_2":"../Additional_Data/Bugs/ActorRelationshipGame/Bug2_ActorRelationshipGame.txt",
            "bug_error_message_Actor_Relationship_Game_3":"../Additional_Data/Bugs/ActorRelationshipGame/Bug3_ActorRelationshipGame.txt",

            "bug_error_message_Hone_1":"../Additional_Data/Bugs/Hone/Bug1_Hone.txt",
            "bug_error_message_Hone_2":"../Additional_Data/Bugs/Hone/Bug2_Hone.txt",
            "bug_error_message_Hone_3":"../Additional_Data/Bugs/Hone/Bug3_Hone.txt",

            "bug_error_message_Hybrid_Images_1":"../Additional_Data/Bugs/HybridImages/Bug1_HybridImages.txt",
            "bug_error_message_Hybrid_Images_2":"../Additional_Data/Bugs/HybridImages/Bug2_HybridImages.txt",
            "bug_error_message_Hybrid_Images_3":"../Additional_Data/Bugs/HybridImages/Bug3_HybridImages.txt",

            "bug_error_message_Login_Registration_1":"../Additional_Data/Bugs/LoginRegistration/Bug1_LoginRegistration.txt",
            "bug_error_message_Login_Registration_2":"../Additional_Data/Bugs/LoginRegistration/Bug2_LoginRegistration.txt",
            "bug_error_message_Login_Registration_3":"../Additional_Data/Bugs/LoginRegistration/Bug3_LoginRegistration.txt",

            "bug_error_message_Readtime_1":"../Additional_Data/Bugs/Readtime/Bug1_Readtime.txt",
            "bug_error_message_Readtime_2":"../Additional_Data/Bugs/Readtime/Bug2_Readtime.txt",
            "bug_error_message_Readtime_3":"../Additional_Data/Bugs/Readtime/Bug3_Readtime.txt",


            "input_actor_relationship_game_Sourcecode": "../DevBench_Project/DevBench/benchmark_data/java/Actor_relationship_game",
            "input_hone_Sourcecode": "../DevBench_Project/DevBench/benchmark_data/python/hone",
            "input_hybrid_images_Sourcecode": "../DevBench_Project/DevBench/benchmark_data/python/Hybrid_Images",
            "input_login_registration_Sourcecode": "../DevBench_Project/DevBench/benchmark_data/javascript/login-registration",
            "input_readtime_Sourcecode": "../DevBench_Project/DevBench/benchmark_data/python/readtime"
        }
    ]
}